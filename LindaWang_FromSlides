def is_empty(L):
    return L == []

def main():
    y = is_empty([1])
    print y
    

Is_empty = lambda L: L == []

def main():
    y = Is_empty([])
    print y
    
def same_start(L):
    return L[0] == L[1]


def main():
    y = same_start([1,1,3])
    print y

Same_start = lambda L: L[0] == L[1]

def main():
    y = Same_start([1,6,3])
    print y

def non_zero(x):
    return x != 0
    
def greater_than_ten(x):
    return x > 10

def is_not_empty(L):
    return L != []
    
def main():
    print 'result for 0 as input'
    print non_zero(0)
    print 'result for 1 as input'
    print non_zero(1)
    print 'retrun the element that are non zero'
    print filter(non_zero, [1,2,0,-3,0,-5])
    print 'return the element that are greater than 10'
    print filter(greater_than_ten,[11,2,6,42])
    
    print 'return all the non-empty lists from a nested list'
    print filter(is_not_empty,[[],[1,2,3],[],[4,5,6],[]])


def increase2(L):
    return L[0] < L[1]
    
def increasing_lists(L):
    print filter(increase2,L)

def main():
    print '---Boolean function to test if the first two elements of a list are in increasing order - list is [2,5,4,9]---\n'
    print increase2([2,5,4,9])
    
    print '---Boolean function to test if the first two elements of a list are in increasing order - list is [2,2,5,0]---\n'
    print increase2([2,2,5,0])

    print '\n---Results for increasing lists---\n'
    print increasing_lists([[2,5,4,9],[2,2],[3,4,5]])
    
    print '\n End \n'
'''Lec_7 end'''

print map(lambda x: x**2 + x**3, [2,3,4])

print filter(lambda x: x != 0, [1,2,0,3,0,6])

print [x * x for x in [1,2,3,4,5]]

nested_list1 = [[],["ab","cd"],[3,4,5]]
print [len(l) for l in nested_list1]
print [l[0] for l in nested_list1 if l !=[]]


print map(lambda x, y: x+y, [1,2,3], [10,20,30])

print map(lambda x, y: x[y], [[1,2],[2,3]],[0,1])

a = [1,2,3,4]
b = [5,6,7,8]
print zip(a,b)

print map(lambda p: p[0]+p[1], zip([1,2,3],[10,20,20]))

a = [1,2,3]
b = [5,6,7]
c = [9,10,11]
print zip(a,b,c)

print map(lambda t: t[0]+t[1]+t[2], zip(a,b,c))
print map(lambda x, y, z: x+y+z,a,b,c)
